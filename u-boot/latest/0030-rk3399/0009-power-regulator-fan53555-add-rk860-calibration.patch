From a09004ca08589f3daa0ffc9d87a4b03205505104 Mon Sep 17 00:00:00 2001
From: Stephen <stephen@vamrs.com>
Date: Fri, 23 Dec 2022 05:57:48 +0800
Subject: [PATCH 1/2] power: regulator: fan53555: add rk860 calibration

Signed-off-by: Stephen <stephen@vamrs.com>

diff --git a/drivers/i2c/i2c-uclass.c b/drivers/i2c/i2c-uclass.c
index 8d9a89ed89..8919ef0631 100644
--- a/drivers/i2c/i2c-uclass.c
+++ b/drivers/i2c/i2c-uclass.c
@@ -24,6 +24,8 @@
 
 #define I2C_MAX_OFFSET_LEN	4
 
+#define msleep(a) udelay(a * 1000)
+
 enum {
 	PIN_SDA = 0,
 	PIN_SCL,
@@ -211,6 +213,96 @@ int dm_i2c_write(struct udevice *dev, uint offset, const uint8_t *buffer,
 	return ret;
 }
 
+int dm_i2c_addr_read(struct udevice *dev, uint i2c_addr, uint offset, uint8_t *buffer, int len)
+{
+	struct dm_i2c_chip *chip = dev_get_parent_plat(dev->parent);
+	struct udevice *bus = dev_get_parent(dev->parent);
+	struct dm_i2c_ops *ops = i2c_get_ops(bus);
+	struct i2c_msg msg[2], *ptr;
+	uint8_t offset_buf[I2C_MAX_OFFSET_LEN];
+	int msg_count;
+
+	if (!ops->xfer) {
+		return -ENOSYS;
+	}
+	if (chip->flags & DM_I2C_CHIP_RD_ADDRESS) {
+		return i2c_read_bytewise(dev->parent, offset, buffer, len);
+	}
+	ptr = msg;
+	if (!i2c_setup_offset(chip, offset, offset_buf, ptr)) {
+		ptr++;
+	}
+	if (len) {
+		ptr->addr = i2c_addr;
+		ptr->flags = chip->flags & DM_I2C_CHIP_10BIT ? I2C_M_TEN : 0;
+		ptr->flags |= I2C_M_RD;
+		ptr->len = len;
+		ptr->buf = buffer;
+		ptr++;
+	}
+	msg_count = ptr - msg;
+	return ops->xfer(bus, msg, msg_count);
+}
+
+
+int dm_i2c_addr_write(struct udevice *dev, uint i2c_addr, uint offset, const uint8_t *buffer,
+		 int len)
+{
+	struct dm_i2c_chip *chip = dev_get_parent_plat(dev->parent);
+	struct udevice *bus = dev_get_parent(dev->parent);
+	struct dm_i2c_ops *ops = i2c_get_ops(bus);
+	struct i2c_msg msg[1];
+
+	if (!ops->xfer)
+		return -ENOSYS;
+
+	if (chip->flags & DM_I2C_CHIP_WR_ADDRESS)
+		return i2c_write_bytewise(dev->parent, offset, buffer, len);
+	/*
+	 * The simple approach would be to send two messages here: one to
+	 * set the offset and one to write the bytes. However some drivers
+	 * will not be expecting this, and some chips won't like how the
+	 * driver presents this on the I2C bus.
+	 *
+	 * The API does not support separate offset and data. We could extend
+	 * it with a flag indicating that there is data in the next message
+	 * that needs to be processed in the same transaction. We could
+	 * instead add an additional buffer to each message. For now, handle
+	 * this in the uclass since it isn't clear what the impact on drivers
+	 * would be with this extra complication. Unfortunately this means
+	 * copying the message.
+	 *
+	 * Use the stack for small messages, malloc() for larger ones. We
+	 * need to allow space for the offset (up to 4 bytes) and the message
+	 * itself.
+	 */
+	if (len < 64) {
+		uint8_t buf[I2C_MAX_OFFSET_LEN + len];
+
+		i2c_setup_offset(chip, offset, buf, msg);
+		msg->len += len;
+		msg->addr = i2c_addr;
+		memcpy(buf + chip->offset_len, buffer, len);
+
+		return ops->xfer(bus, msg, 1);
+	} else {
+		uint8_t *buf;
+		int ret;
+
+		buf = malloc(I2C_MAX_OFFSET_LEN + len);
+		if (!buf)
+			return -ENOMEM;
+		i2c_setup_offset(chip, offset, buf, msg);
+		msg->len += len;
+		msg->addr = i2c_addr;
+		memcpy(buf + chip->offset_len, buffer, len);
+
+		ret = ops->xfer(bus, msg, 1);
+		free(buf);
+		return ret;
+	}
+}
+
 int dm_i2c_xfer(struct udevice *dev, struct i2c_msg *msg, int nmsgs)
 {
 	struct udevice *bus = dev_get_parent(dev);
diff --git a/drivers/power/regulator/fan53555.c b/drivers/power/regulator/fan53555.c
index 5681206bba..0dae931cbc 100644
--- a/drivers/power/regulator/fan53555.c
+++ b/drivers/power/regulator/fan53555.c
@@ -97,6 +97,14 @@ struct fan53555_priv {
 	unsigned int slew_rate;
 	/* Sleep voltage cache */
 	unsigned int sleep_vol_cache;
+
+	int rk860_type;
+};
+
+enum {
+	IS_RK860_0_ONLY = 1,
+	IS_RK860_1_ONLY,
+	IS_RK860_0_1,
 };
 
 static int fan53555_regulator_of_to_plat(struct udevice *dev)
@@ -198,6 +206,139 @@ enum {
 	DIE_REV_WIDTH = 4,
 };
 
+static void fan53555_rk860_calibration(struct udevice *dev, struct fan53555_priv *di)
+{
+	int ret;
+	uint8_t buffer0[3], buffer1[3];
+	uint8_t value, version0 = 0x04, version1 = 0x04;
+	uint8_t flag = 0;
+
+	di->rk860_type = 0;
+	ret = dm_i2c_addr_read(dev, 0x40, 0x0E, &value, 1);
+	if (ret < 0) {
+		printf("%s>>>>>>hardware do not have rk860-0\n", __func__);
+	} else {
+		if (value == 0x00 || value == 0x04) {
+			di->rk860_type = IS_RK860_0_ONLY;
+			version0 = value & 0x04;
+			printf("%s>>>>>>hardware have rk860-0, reg[0x0e] = 0x%x\n", __func__, value);
+		} else {
+			printf("%s>>>>>>hardware 0x40 i2c-dev is not rk860-0, maybe syr827/syr837, reg[0x0e] = 0x%x\n", __func__, value);
+			flag = 1;
+		}
+	}
+
+	ret = dm_i2c_addr_read(dev, 0x41, 0x0E, &value, 1);
+	if (ret < 0) {
+		printf("%s>>>>>>hardware do not have rk860-1\n", __func__);
+	} else {
+		if (value == 0x44 || value == 0x40) {
+			if (di->rk860_type)
+				di->rk860_type = IS_RK860_0_1;
+			else
+				di->rk860_type = IS_RK860_1_ONLY;
+
+			version1 = value & 0x04;
+			printf("%s>>>>>>hardware have rk860-1, reg[0x0e] = 0x%x\n", __func__, value);
+		} else {
+			printf("%s>>>>>>hardware 0x41 i2c-dev is not rk860-1, maybe syr828/syr838, reg[0x0e] = 0x%x\n", __func__, value);
+			flag = 2;
+		}
+	}
+
+	if (flag == 1 && di->rk860_type == IS_RK860_1_ONLY && version1 == 0) {
+		printf("%s>>>>>>warnning..., can not support this hardware mode\n", __func__);
+		return;
+	}
+
+	printf("%s>>>>>rk860_type = %d\n", __func__, di->rk860_type);
+
+	switch (di->rk860_type) {
+		case IS_RK860_0_ONLY:
+			if (version0 == 0) {
+				dm_i2c_addr_read(dev, 0x40, 0x0B, &buffer0[0], 1);
+				dm_i2c_addr_read(dev, 0x40, 0x0C, &buffer0[1], 1);
+				dm_i2c_addr_read(dev, 0x40, 0x0D, &buffer0[2], 1);
+				value=0x5a;
+				dm_i2c_addr_write(dev, 0x40, 0x0A, &value, 1);
+				value=0x04;
+				dm_i2c_addr_write(dev, 0x40, 0x0E, &value, 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0B, &buffer0[0], 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0C, &buffer0[1], 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0D, &buffer0[2], 1);
+
+				printf("%s>>>>>> 0x0A = 0x%x,0x0B = 0x%x,0x0C = 0x%x,0x0D = 0x%x,0x0E = 0x%x\n",__func__, \
+						pmic_reg_read(dev->parent, 0x0A), \
+						pmic_reg_read(dev->parent, 0x0B), \
+						pmic_reg_read(dev->parent, 0x0C), \
+						pmic_reg_read(dev->parent, 0x0D), \
+						pmic_reg_read(dev->parent, 0x0E)  \
+						);
+				printf("%s>>>>>>rk860-0 calibration okay.\n", __func__);
+			}
+			break;
+
+		case IS_RK860_1_ONLY:
+			if (version1 == 0) {
+				dm_i2c_addr_read(dev, 0x41, 0x0B, &buffer1[0], 1);
+				dm_i2c_addr_read(dev, 0x41, 0x0C, &buffer1[1], 1);
+				dm_i2c_addr_read(dev, 0x41, 0x0D, &buffer1[2], 1);
+				value=0x5a;
+				dm_i2c_addr_write(dev, 0x41, 0x0A, &value, 1);
+				value=0x44;
+				dm_i2c_addr_write(dev, 0x40, 0x0E, &value, 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0B, &buffer1[0], 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0C, &buffer1[1], 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0D, &buffer1[2], 1);
+
+				printf("%s>>>>>> 0x0A = 0x%x,0x0B = 0x%x,0x0C = 0x%x,0x0D = 0x%x,0x0E = 0x%x\n",__func__, \
+						pmic_reg_read(dev->parent, 0x0A), \
+						pmic_reg_read(dev->parent, 0x0B), \
+						pmic_reg_read(dev->parent, 0x0C), \
+						pmic_reg_read(dev->parent, 0x0D), \
+						pmic_reg_read(dev->parent, 0x0E)  \
+						);
+				printf("%s>>>>>>rk860-1 calibration okay.\n", __func__);
+			}
+			break;
+
+		case IS_RK860_0_1:
+			if (version0 == 0 || version1 == 0) {
+				dm_i2c_addr_read(dev, 0x40, 0x0B, &buffer0[0], 1);
+				dm_i2c_addr_read(dev, 0x40, 0x0C, &buffer0[1], 1);
+				dm_i2c_addr_read(dev, 0x40, 0x0D, &buffer0[2], 1);
+				dm_i2c_addr_read(dev, 0x41, 0x0B, &buffer1[0], 1);
+				dm_i2c_addr_read(dev, 0x41, 0x0C, &buffer1[1], 1);
+				dm_i2c_addr_read(dev, 0x41, 0x0D, &buffer1[2], 1);
+				value = 0x5a;
+				dm_i2c_addr_write(dev, 0x40, 0x0A, &value, 1);
+				value = 0x84;
+				dm_i2c_addr_write(dev, 0x40, 0x0E, &value, 1);
+				value = 0x5a;
+				dm_i2c_addr_write(dev, 0x41, 0x0A, &value, 1);
+				value = 0x44;
+				dm_i2c_addr_write(dev, 0x40, 0x0E, &value, 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0B, &buffer1[0], 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0C, &buffer1[1], 1);
+				dm_i2c_addr_write(dev, 0x41, 0x0D, &buffer1[2], 1);
+				value = 0x04;
+				dm_i2c_addr_write(dev, 0x42, 0x0E, &value, 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0B, &buffer0[0], 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0C, &buffer0[1], 1);
+				dm_i2c_addr_write(dev, 0x40, 0x0D, &buffer0[2], 1);
+
+				printf("%s>>>>>>rk860-0, rk860-1 calibration okay.\n", __func__);
+			}
+			break;
+
+		default:
+			printf("%s>>>>>>do nothing\n", __func__);
+			break;
+	}
+
+	return;
+}
+
 static int fan53555_probe(struct udevice *dev)
 {
 	struct fan53555_priv *priv = dev_get_priv(dev);
@@ -222,8 +363,12 @@ static int fan53555_probe(struct udevice *dev)
 	if (fan53555_voltages_setup(dev) < 0)
 		return -ENODATA;
 
-	debug("%s: FAN53555 option %d rev %d detected\n",
+	printf("%s: FAN53555 option %d rev %d detected\n",
 	      __func__, priv->die_id, priv->die_rev);
+	
+        if (priv->vendor == FAN53555_VENDOR_SILERGY) {
+		fan53555_rk860_calibration(dev, priv);
+        }
 
 	return 0;
 }
diff --git a/include/i2c.h b/include/i2c.h
index ef3820eaba..b5d6cee15a 100644
--- a/include/i2c.h
+++ b/include/i2c.h
@@ -187,6 +187,7 @@ struct i2c_msg_list {
  * Return: 0 on success, -ve on failure
  */
 int dm_i2c_read(struct udevice *dev, uint offset, uint8_t *buffer, int len);
+int dm_i2c_addr_read(struct udevice *dev, uint i2c_addr, uint offset, uint8_t *buffer, int len);
 
 /**
  * dm_i2c_write() - write bytes to an I2C chip
@@ -202,6 +203,8 @@ int dm_i2c_read(struct udevice *dev, uint offset, uint8_t *buffer, int len);
  */
 int dm_i2c_write(struct udevice *dev, uint offset, const uint8_t *buffer,
 		 int len);
+int dm_i2c_addr_write(struct udevice *dev, uint i2c_addr, uint offset, const uint8_t *buffer,
+		 int len);
 
 /**
  * dm_i2c_probe() - probe a particular chip address
-- 
2.30.2

