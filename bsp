#!/bin/bash

usage() {
    cat >&2 << EOF
Radxa BSP Build Tool
usage: $(basename "$0") [options] <linux|u-boot> <edition> [product]

When building u-boot, you can also provide 'product' argument,
which will only build for that specific image.

Supported package generation options:
    -r, --revision [num]    Specify custom revision number, default=1
    -c, --clean             Run 'make clean' before building
    -C, --distclean         Run 'make distclean' before building
    --no-prepare-source     Allow building against locally modified repos
    --no-config             Do not load defconfig or apply kconfig
    -p                      Pause after applying patches from each folder
    -n, --native-build      Build without using Docker
    -l, --local-docker      Using locally built Docker image
    -s, --docker-shell      Start a shell inside the container instead of the build

Alternative functionalities
    --json [catagory]   Print supported options in json format
                        Available catagories: $(get_supported_infos)
    --export [edition]  Export profile
    --import [edition]  Import profile
    -h, --help          Show this help message

Supported Linux edition:
$(printf_array "    %s\n" "$(get_supported_edition linux)")

Supported U-Boot edition:
$(printf_array "    %s\n" "$(get_supported_edition u-boot)")
EOF
}

get_supported_edition() {
    while (( $# > 0 )) && [[ "$1" == "--" ]]
    do
        shift
    done

    if [[ ! -d "$SCRIPT_DIR/$1" ]] || [[ -z "$1" ]]
    then
        error $EXIT_UNSUPPORTED_OPTION "$1"
    fi

    local editions=()
    for f in $(ls $SCRIPT_DIR/$1)
    do
        editions+="$f "
    done
    echo "${editions[@]}"
}

get_supported_infos() {
    while (( $# > 0 )) && [[ "$1" == "--" ]]
    do
        shift
    done

    local infos=("edition linux" "edition u-boot")
    echo "${infos[@]}"
}

json() {
    local array=( "$(get_supported_infos)" )
    if ! in_array "$@" "${array[@]}"
    then
        error $EXIT_UNKNOWN_OPTION "$1"
    fi

    local output
    output=( $(get_supported_$@) )
    if (( $? != 0 ))
    then
        return 1
    fi
    printf_array "json" "${output[@]}"
}

build() {
    prepare_source "$TARGET"

    bsp_prepare

    if [[ -n "$CLEAN_LEVEL" ]]
    then
        bsp_make "${BSP_MAKE_DEFINES[@]}" $CLEAN_LEVEL 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"
    fi
    
    if [[ "$NO_CONFIG" != "yes" ]]
    then
        bsp_make "${BSP_MAKE_DEFINES[@]}" $BSP_DEFCONFIG 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"
        for d in $(find -L "$SCRIPT_DIR/$TARGET/$FORK" -mindepth 1 -type d | sort)
        do
            apply_kconfig "$d/kconfig.conf" 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"
        done
        apply_kconfig "$SCRIPT_DIR/$TARGET/$FORK/kconfig.conf" 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"
        # Cannot run `bsp_make olddefconfig` seperately here
        # as it will break the build in the next step
        BSP_MAKE_TARGETS=("olddefconfig" "${BSP_MAKE_TARGETS[@]}")
    fi

    bsp_make "${BSP_MAKE_DEFINES[@]}" "${BSP_MAKE_TARGETS[@]}" 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"
}

main() {
    local SCRIPT_DIR="$(dirname "$(realpath "$0")")"
    source "$SCRIPT_DIR/lib/utils.sh"

    rm -f "$SCRIPT_DIR/.src/build.log"

    local ARGV=("$@")
    if ! local TEMP="$(getopt -o "r:cCphnls" -l "revision:,clean,distclean,no-prepare-source,no-config,json:,export:,import:,help,native-build,local-docker,docker-shell" -n "$0" -- "$@")"
    then
        usage
        return
    fi
    eval set -- "$TEMP"

    local PKG_REVISION="1"
    local NO_PREPARE_SOURCE=
    local NO_CONFIG=
    local CLEAN_LEVEL=
    local PATCH_PAUSE=
    local NATIVE_BUILD="false"
    local DOCKER_REGISTRY="ghcr.io/radxa-repo/"
    local DOCKER_SHELL="false"

    while true
    do
        TEMP="$1"
        shift
        case "$TEMP" in
            -r|--revision)
                PKG_REVISION="$1"
                shift
                ;;
            --no-prepare-source)
                NO_PREPARE_SOURCE="yes"
                ;;
            --no-config)
                NO_CONFIG="yes"
                ;;
            -p)
                PATCH_PAUSE="yes"
                ;;
            -c|--clean)
                CLEAN_LEVEL="clean"
                ;;
            -C|--distclean)
                CLEAN_LEVEL="distclean"
                ;;
            -n|--native-build)
                NATIVE_BUILD="true"
                ;;
            -l|--local-docker)
                DOCKER_REGISTRY=
                ;;
            -s|--docker-shell)
                DOCKER_SHELL="true"
                ;;
            --json)
                json "$@"
                return
                ;;
            -h|--help)
                usage
                return
                ;;
            --export)
                find "linux/$1" "u-boot/$1" | tar acvf "$1.tar.xz" --files-from -
                return
                ;;
            --import)
                tar axvf "$1"
                return
                ;;
            --)
                break
                ;;
            *)
                error $EXIT_UNKNOWN_OPTION "$TEMP"
                ;;
        esac
    done

    if (( $# == 0))
    then
        usage
        return
    fi

    if ! $NATIVE_BUILD
    then
        local DOCKER_IMAGE="$(docker image ls "-qf=reference=${DOCKER_REGISTRY}bsp:main")"
        local DOCKER_EXIT_CODE=0

        if [[ -z $DOCKER_REGISTRY ]]
        then
            docker build --force-rm -t "${DOCKER_REGISTRY}bsp:main" "$SCRIPT_DIR/docker"
        else
            docker pull "${DOCKER_REGISTRY}bsp:main"
        fi

        if [[ $DOCKER_IMAGE != "$(docker image ls "-qf=reference=${DOCKER_REGISTRY}bsp:main")" ]]
        then
            docker container rm bsp &>/dev/null || true
            docker image rm "${DOCKER_REGISTRY}bsp:builder" &>/dev/null || true
        fi

        DOCKER_BUILDER="$(docker image ls "-qf=reference=${DOCKER_REGISTRY}bsp:builder")"
        if [[ -z $DOCKER_BUILDER ]]
        then
            docker tag "${DOCKER_REGISTRY}bsp:main" "${DOCKER_REGISTRY}bsp:builder"
        fi

        DOCKER_OPTIONS=( "--name" "bsp" )
        DOCKER_OPTIONS+=( "--workdir" "$PWD" )
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$PWD,destination=$PWD" )
        if [[ -t 0 ]]
        then
            DOCKER_OPTIONS+=( "-it" )
        fi
        if [[ "$PWD" != "$SCRIPT_DIR" ]]
        then
            DOCKER_OPTIONS+=( "--mount" "type=bind,source=$SCRIPT_DIR,destination=$SCRIPT_DIR" )
        fi
        docker container rm bsp &>/dev/null || true
        if $DOCKER_SHELL
        then
            if ! docker run "${DOCKER_OPTIONS[@]}" "${DOCKER_REGISTRY}bsp:builder" bash -c "sed -i -E \"s/^(runner):(x?):([0-9]+):([0-9]+):(.*):(.*):(.*)$/\1:\2:$(id -u):$(id -g):\5:\6:\7/\" /etc/passwd && sudo -u runner -i"
            then
                DOCKER_EXIT_CODE="$(docker inspect bsp --format='{{.State.ExitCode}}')"
            fi
        else
            if ! docker run "${DOCKER_OPTIONS[@]}" "${DOCKER_REGISTRY}bsp:builder" bash -c "sed -i -E \"s/^(runner):(x?):([0-9]+):([0-9]+):(.*):(.*):(.*)$/\1:\2:$(id -u):$(id -g):\5:\6:\7/\" /etc/passwd && sudo -u runner \"$0\" --native-build ${ARGV[*]}"
            then
                DOCKER_EXIT_CODE="$(docker inspect bsp --format='{{.State.ExitCode}}')"
            fi
            docker commit bsp "${DOCKER_REGISTRY}bsp:builder"
            docker container rm bsp
        fi
        return $DOCKER_EXIT_CODE
    fi

    TEMP="$1"
    shift
    case "$TEMP" in
        linux)
            load_edition linux "$1"
            build
            bsp_makedeb
            ;;
        u-boot)
            load_edition u-boot "$1"

            if (( $# > 1 )) && [[ -n "$2" ]]
            then
                if ! in_array "$2" "${SUPPORTED_BOARDS[@]}"
                then
                    error $EXIT_UNKNOWN_OPTION "$2"
                fi
                local products=("$2")
            else
                local products=("${SUPPORTED_BOARDS[@]}")
            fi

            rm -rf "$SCRIPT_DIR/.root"

            for BOARD in "${products[@]}"
            do
                load_edition u-boot "$1"

                if [[ $(type -t bsp_profile_base) == function ]]
                then
                    bsp_profile_base
                fi
                if [[ $(type -t bsp_$BOARD) == function ]]
                then
                    bsp_$BOARD
                fi
                if [[ $(type -t bsp_profile_override) == function ]]
                then
                    bsp_profile_override
                fi

                build
                bsp_preparedeb
                SOURCE_GITREV_OVERRIDE="${SOURCE_GITREV_OVERRIDE:-$SOURCE_GITREV}"
            done

            SUPPORTED_BOARDS=("${products[@]}")
            SOURCE_GITREV="$SOURCE_GITREV_OVERRIDE"
            bsp_makedeb
            ;;
        *)
            usage
            return 1
            ;;
    esac
}

main "$@"
