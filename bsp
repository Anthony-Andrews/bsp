#!/usr/bin/env bash

main() {
    local SCRIPT_DIR="$(dirname "$(realpath "$0")")"
    source "$SCRIPT_DIR/lib/utils.sh"
    source "$SCRIPT_DIR/lib/info.sh"
    source "$SCRIPT_DIR/lib/sub_commands.sh"

    rm -f "$SCRIPT_DIR/.src/build.log"

    local ARGV=("$@")
    local TEMP
    if ! TEMP="$(getopt -o "r:cCphnlsdb:" -l "revision:,clean,distclean,no-prepare-source,no-config,help,native-build,local-container,container-shell,debug,dtb,long-version,backend:,no-submodule-check,dirty,no-build,no-container-update" -n "$0" -- "$@")"
    then
        return
    fi
    eval set -- "$TEMP"

    local PKG_REVISION="1"
    local NO_PREPARE_SOURCE="false"
    local NO_CONFIG="false"
    local NO_BUILD="false"
    local NO_CONTAINER_UPDATE="false"
    local CLEAN_LEVEL=
    local PATCH_PAUSE="false"
    local NATIVE_BUILD="false"
    local CONTAINER_REGISTRY="ghcr.io/radxa-repo/"
    local CONTAINER_SHELL="false"
    local DEBUG_BUILD="false"
    local DTB_ONLY="false"
    local LONG_VERSION="false"
    local CONTAINER_BACKEND="docker"
    local NO_SUBMODULE_CHECK="false"

    if [[ -f "$SCRIPT_DIR/.bsp-config" ]]
    then
        source "$SCRIPT_DIR/.bsp-config"
    fi

    while true
    do
        TEMP="$1"
        shift
        case "$TEMP" in
            -r|--revision)
                PKG_REVISION="$1"
                shift
                ;;
            --no-prepare-source)
                NO_PREPARE_SOURCE="true"
                ;;
            --no-config)
                NO_CONFIG="true"
                ;;
            --no-container-update)
                NO_CONTAINER_UPDATE="true"
                ;;
            --dirty)
                NO_PREPARE_SOURCE="true"
                NO_CONFIG="true"
                NO_CONTAINER_UPDATE="true"
                ;;
            --no-build)
                NO_BUILD="true"
                ;;
            -p)
                PATCH_PAUSE="true"
                ;;
            -c|--clean)
                CLEAN_LEVEL="clean"
                ;;
            -C|--distclean)
                CLEAN_LEVEL="distclean"
                ;;
            -n|--native-build)
                NATIVE_BUILD="true"
                ;;
            -l|--local-container)
                CONTAINER_REGISTRY=
                ;;
            -s|--container-shell)
                CONTAINER_SHELL="true"
                ;;
            -d|--debug)
                DEBUG_BUILD="true"
                ;;
            --dtb)
                DTB_ONLY="true"
                ;;
            -b|--backend)
                CONTAINER_BACKEND="$1"
                shift
                ;;
            --long-version)
                LONG_VERSION="true"
                ;;
            --no-submodule-check)
                NO_SUBMODULE_CHECK="true"
                ;;
            -h|--help)
                usage
                return
                ;;
            --)
                break
                ;;
            *)
                error $EXIT_UNKNOWN_OPTION "$TEMP"
                ;;
        esac
    done

    if (( $# == 0))
    then
        usage
        return
    fi

    TEMP="$1"
    case "$TEMP" in
        install|export|import|json)
            shift
            "_$TEMP" "$@"
            return
            ;;
    esac

    if ! $NO_SUBMODULE_CHECK && [[ -z "$(git submodule status)" ]]
    then
        error $EXIT_NO_SUBMODULE
    fi

    if ! $NATIVE_BUILD
    then
        if [[ "$(basename "$CONTAINER_BACKEND")" == "docker" ]] && "$CONTAINER_BACKEND" --help | grep -q podman
        then
            echo "'$CONTAINER_BACKEND' backend is selected, but the functionality is actually provided by 'podman' backend. Updating accordingly..."
            CONTAINER_BACKEND="$(command -v podman)"
        fi

        local CONTAINER_IMAGE="$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}bsp:main")"
        local CONTAINER_EXIT_CODE=0

        if ! $NO_CONTAINER_UPDATE
        then
            if [[ -z $CONTAINER_REGISTRY ]]
            then
                $CONTAINER_BACKEND build --force-rm -t "${CONTAINER_REGISTRY}bsp:main" "$SCRIPT_DIR/container"
            else
                $CONTAINER_BACKEND pull "${CONTAINER_REGISTRY}bsp:main"
            fi
        fi

        if [[ $CONTAINER_IMAGE != "$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}bsp:main")" ]]
        then
            $CONTAINER_BACKEND container rm bsp &>/dev/null || true
            $CONTAINER_BACKEND image rm "${CONTAINER_REGISTRY}bsp:builder" &>/dev/null || true
        fi

        CONTAINER_BUILDER="$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}bsp:builder")"
        if [[ -z $CONTAINER_BUILDER ]]
        then
            $CONTAINER_BACKEND tag "${CONTAINER_REGISTRY}bsp:main" "${CONTAINER_REGISTRY}bsp:builder"
        fi

        CONTAINER_OPTIONS=( "--name" "bsp" )
        CONTAINER_OPTIONS+=( "--workdir" "$PWD" )
        CONTAINER_OPTIONS+=( "--mount" "type=bind,source=$PWD,destination=$PWD" )
        if [[ -t 0 ]]
        then
            CONTAINER_OPTIONS+=( "-it" )
        fi
        if [[ "$PWD" != "$SCRIPT_DIR" ]]
        then
            CONTAINER_OPTIONS+=( "--mount" "type=bind,source=$SCRIPT_DIR,destination=$SCRIPT_DIR" )
        fi
        $CONTAINER_BACKEND container kill bsp &>/dev/null || true
        $CONTAINER_BACKEND container rm bsp &>/dev/null || true
        if [[ "$(basename "$CONTAINER_BACKEND")" == "podman" ]]
        then
            CONTAINER_OPTIONS+=( "--user" "root" )
            if $CONTAINER_SHELL
            then
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}bsp:builder" bash
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect bsp --format='{{.State.ExitCode}}')"
                fi
            else
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}bsp:builder" bash -c "\"$0\" --native-build ${ARGV[*]}"
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect bsp --format='{{.State.ExitCode}}')"
                fi
                $CONTAINER_BACKEND container rm bsp
            fi
        else
            local CONTAINER_SUDO="sed -i -E \"s/^(runner):(x?):([0-9]+):([0-9]+):(.*):(.*):(.*)$/\1:\2:$(id -u):$(id -g):\5:\6:\7/\" /etc/passwd && sudo -u runner"
            if $CONTAINER_SHELL
            then
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}bsp:builder" bash -c "$CONTAINER_SUDO -i"
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect bsp --format='{{.State.ExitCode}}')"
                fi
            else
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}bsp:builder" bash -c "$CONTAINER_SUDO \"$0\" --native-build ${ARGV[*]}"
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect bsp --format='{{.State.ExitCode}}')"
                fi
                $CONTAINER_BACKEND container rm bsp
            fi
        fi
        return $CONTAINER_EXIT_CODE
    fi

    local TARGET_COMPONENTS=() TARGET_EDITIONS=() TARGET_PRODUCTS=()
    TEMP="$1"
    shift
    case "$TEMP" in
        linux|u-boot)
            build "$TEMP" "$@"
            ;;
        *)
            usage
            return 1
            ;;
    esac
}

main "$@"
