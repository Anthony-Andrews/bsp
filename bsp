#!/bin/bash

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
source "$SCRIPT_DIR/lib/utils.sh"

usage() {
    cat >&2 << EOF
Radxa BSP Build Tool
usage: $(basename "$0") [options] <fork>

Supported package generation options:
    -r, --revision [num]
                        Specify custom revision number, default=1
    --no-prepare-source Allow building against locally modified repos

Alternative functionalities
    --json [catagory]   Print supported options in json format
                        Available catagories: $(get_supported_infos)
    -h, --help          Show this help message

Supported fork:
$(printf_array "    %s\n" "$(get_supported_forks)")
EOF
    exit "$1"
}


get_supported_forks() {
    local FORKS=()
    for f in $(ls $SCRIPT_DIR/forks)
    do
        FORKS+="$f "
    done
    echo "${FORKS[@]}"
}

get_supported_infos() {
    local INFOS=("forks")
    echo "${INFOS[@]}"
}

json() {
    local ARRAY=($(get_supported_infos))
    if ! in_array "$1" "${ARRAY[@]}"
    then
        error $EXIT_UNKNOWN_OPTION "$1"
    fi

    printf_array "json" $(get_supported_$1)
    exit 0
}

build() {
    if ! source "$SCRIPT_DIR/lib/$1.sh" 2>/dev/null
    then
        error $EXIT_UNKNOWN_OPTION "$1"
    fi

    if ! source "$SCRIPT_DIR/forks/$2/fork.conf" 2>/dev/null
    then
        error $EXIT_UNKNOWN_OPTION "$2"
    fi

    local TARGET=$1
    local FORK=$2

    [[ $NO_PREPARE_SOURCE != "yes" ]] && prepare_source

    local LINUX_VERSION=$(make -C "$SCRIPT_DIR/.src/linux" -s kernelversion)

    make -C "$SCRIPT_DIR/.src/linux" -j$(nproc) \
        ARCH=$LINUX_ARCH CROSS_COMPILE=$CROSS_COMPILE \
        KDEB_COMPRESS="xz" DPKG_FLAGS=$LINUX_DPKG_FLAGS \
        LOCALVERSION=-$FORK KERNELRELEASE=$LINUX_VERSION-$FORK KDEB_PKGVERSION=$LINUX_VERSION-$FORK-$PKG_REVISION \
        $LINUX_DEFCONFIG 2>&1 | tee "$SCRIPT_DIR/.src/build.log"
    
    for d in $(find -L "$SCRIPT_DIR/forks/$FORK" -type d | sort)
    do
        if [[ -e "$d/kconfig.conf" ]]
        then
            tee -a "$SCRIPT_DIR/.src/build.log" <<< "Apply kconfig from $d/kconfig.conf"
            kconfig "$d/kconfig.conf"
            kconfig -v "$d/kconfig.conf" | tee -a "$SCRIPT_DIR/.src/build.log"
        fi
    done

    make -C "$SCRIPT_DIR/.src/linux" -j$(nproc) \
        ARCH=$LINUX_ARCH CROSS_COMPILE=$CROSS_COMPILE \
        KDEB_COMPRESS="xz" DPKG_FLAGS=$LINUX_DPKG_FLAGS \
        LOCALVERSION=-$FORK KERNELRELEASE=$LINUX_VERSION-$FORK KDEB_PKGVERSION=$LINUX_VERSION-$FORK-$PKG_REVISION \
        olddefconfig all bindeb-pkg 2>&1 | tee -a "$SCRIPT_DIR/.src/build.log"

    mv $SCRIPT_DIR/.src/*.deb ./
    for BOARD in ${SUPPORTED_BOARDS[@]}
    do
        local NAMES=("linux-image-$BOARD" "linux-headers-$BOARD")
        local DESCRIPTIONS=("Radxa Linux kernel image for $BOARD" "Radxa Linux header for $BOARD")
        local DEPENDS=("linux-image-$LINUX_VERSION-$FORK" "linux-headers-$LINUX_VERSION-$FORK")
        for i in {0..1}
        do
            local NAME=${NAMES[$i]}
            local VERSION="$LINUX_VERSION-$FORK-$PKG_REVISION"
            local URL="https://github.com/radxa-pkg/linux-image-$FORK"
            local DESCRIPTION=${DESCRIPTIONS[$i]}
            local DEPEND=${DEPENDS[$i]}
            fpm -s empty -t deb -n "$NAME" -v "$VERSION" \
                --deb-compression xz \
                --depends "$DEPEND" \
                --url "$URL" \
                --description "$DESCRIPTION" \
                --license "GPL-2+" \
                -m "Radxa <dev@radxa.com>" \
                --vendor "Radxa" \
                --force
        done
    done
}

main() {
    local PKG_REVISION="1"
    local NO_PREPARE_SOURCE=

    while (( $# > 0 ))
    do
        case "$1" in
            -r | --revision)
                PKG_REVISION="$2"
                shift 2
                ;;
            --no-prepare-source)
                NO_PREPARE_SOURCE="yes"
                shift
                ;;
            --json)
                json "$2"
                ;;
            -h | --help)
                usage 0
                ;;
            -*)
                error $EXIT_UNKNOWN_OPTION "$1"
                ;;
            linux)
                build "$1" "$2"
                return
                ;;
            *)  break ;;
        esac
    done
    usage 1
}

main "$@"